using System;
using System.Collections.Generic;

class Graph
{
    public int V; // Количество вершин
    public List<List<(int, int)>> Adj; // Список смежности

    public Graph(int vertices)
    {
        V = vertices;
        Adj = new List<List<(int, int)>>(vertices);
        for (int i = 0; i < vertices; i++)
            Adj.Add(new List<(int, int)>());
    }

    public void AddEdge(int u, int v, int weight)
    {
        Adj[u].Add((v, weight));
    }
}

class DijkstraAlgorithm
{
    public static void InitializeSingleSource(int s, int[] d, int[] pi)
    {
        for (int v = 0; v < d.Length; v++)
        {
            d[v] = int.MaxValue;
            pi[v] = -1;
        }
        d[s] = 0;
    }

    public static void Dijkstra(Graph graph, int s, int[] d, int[] pi)
    {
        InitializeSingleSource(s, d, pi);

        var priorityQueue = new SortedSet<(int distance, int vertex)>(
            Comparer<(int, int)>.Create((a, b) =>
                a.distance == b.distance ? a.vertex.CompareTo(b.vertex) : a.distance.CompareTo(b.distance)));

        priorityQueue.Add((0, s));

        while (priorityQueue.Count > 0)
        {
            var (dist, u) = priorityQueue.Min;
            priorityQueue.Remove(priorityQueue.Min);

            foreach (var (v, weight) in graph.Adj[u])
            {
                if (d[v] > d[u] + weight)
                {
                    priorityQueue.Remove((d[v], v));
                    d[v] = d[u] + weight;
                    pi[v] = u;
                    priorityQueue.Add((d[v], v));
                }
            }
        }
    }

    public static void PrintResults(int[] d, int[] pi)
    {
        for (int i = 0; i < d.Length; i++)
        {
            Console.WriteLine($"d[{i}] = {d[i]}, pi[{i}] = {pi[i]}");
        }
    }
}

class Program
{
    static void Main()
    {
        var G = new Graph(5);

        G.AddEdge(0, 1, 10);
        G.AddEdge(0, 4, 5);
        G.AddEdge(1, 2, 1);
        G.AddEdge(1, 3, 2);
        G.AddEdge(1, 4, 2);
        G.AddEdge(2, 3, 4);
        G.AddEdge(3, 4, 3);

        int startVertex = 0;

        var d = new int[G.V];
        var pi = new int[G.V];

        DijkstraAlgorithm.Dijkstra(G, startVertex, d, pi);

        Console.WriteLine("Test 1: From vertex 0 (start):");
        DijkstraAlgorithm.PrintResults(d, pi);

        var G2 = new Graph(4);
        G2.AddEdge(0, 1, 5);
        G2.AddEdge(0, 2, 1);
        G2.AddEdge(1, 3, 2);
        G2.AddEdge(2, 1, 2);
        G2.AddEdge(2, 3, 3);

        var d2 = new int[4];
        var pi2 = new int[4];

        DijkstraAlgorithm.Dijkstra(G2, 0, d2, pi2);

        Console.WriteLine("Test 2: From vertex 0 (start) in second graph:");
        DijkstraAlgorithm.PrintResults(d2, pi2);

        var G3 = new Graph(3);
        G3.AddEdge(0, 1, 1);
        G3.AddEdge(1, 2, 2);

        var d3 = new int[3];
        var pi3 = new int[3];

        DijkstraAlgorithm.Dijkstra(G3, 0, d3, pi3);

        Console.WriteLine("Test 3: From vertex 0 (start) in third graph:");
        DijkstraAlgorithm.PrintResults(d3, pi3);
    }
}
